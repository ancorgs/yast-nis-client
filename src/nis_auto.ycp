/**
 * File:
 *   nis_auto.ycp
 *
 * Package:
 *   Configuration of NIS
 *
 * Summary:
 *   Client for autoinstallation
 *
 * Authors:
 *   Martin Vidner <mvidner@suse.cz>
 *
 * $Id$
 *
 * This is a client for autoinstallation. It takes its arguments,
 * goes through the configuration and return the setting.
 * Does not do any changes to the configuration.
 */

/**
 * @param first a map of NIS settings
 * @return map edited settings or an empty map if canceled
 * @example map mm = $[ "FAIL_DELAY" : "77" ];
 * @example map ret = CallModule ("nis_auto", [ mm ]);
 */

{
    textdomain "nis";

    import "Nis";
    import "Wizard";
    include "nis/ui.ycp";

    list args = Args ();
    if ( size (args) <= 0 )
    {
	y2error ("Did not get the settings, probably some mistake...");
	return false;
    }
    if ( !is ( Args (0), map ) )
    {
	y2error ("Bad argument for nis_auto: %1", Args (0));
	return false;
    }

    boolean cms_mode = false;
    map settings = $[];
    {
	integer i = 0;
	while (i < size (Args()))
	{
	    if (is (Args (i), map) && nil != Args (i))	settings = Args (i);
	    else if (Args (i) == .cms)			cms_mode=true;	   
	    i = i + 1;
	}
    }

    // The settings are in the first argument
    
    y2milestone("Imported: (%1)", settings);
    Nis::Import ( settings );
     
    define set_contents(map settings) ``{
	Nis::Import ( settings );
        term contents =
	    `VBox(
		  `VSpacing(1),
		  `RichText( `id(`summary), Nis::Summary()),
		  `VSpacing(),
		  `HBox(
			`PushButton(`id(`configure), _("&Configure NIS")),
			`HStretch(),
			`PushButton(`id(`reset), _("&Reset Configuration"))
			)
		  );

	Wizard::SetContents(_("NIS Configuration"),
			    contents, "", true, true);
    }

    // Create Summary and buttons for launching
    // in auto mode
    
    if ( cms_mode) {
	import "Wizard"; 
	set_contents(settings);
	any ret = nil;
	repeat {
	    ret = UI::UserInput();
	    if (ret == `configure)
	    {
		map result = CallModule("nis_auto", [settings]);
		if (result!=$[])
		    settings = result;

		set_contents(settings);
	    }
	    else if (ret == `reset) {
		settings = $[];
		set_contents(settings);
	    }
	    else if (ret == `help)
	    {
		UI::LongTextPopup (_("Help"), `RichText (_("Help")), 50, 15);
	    }
	} until ( ret == `key || ret ==`next || ret == `back);


	return [ret,settings];

    }

   
    Nis::_autofs_allowed = true;

    Wizard::CreateDialog ();
    Wizard::ReplaceAbortButton(`Empty ());
    symbol ret = NisDialog ();
    UI::CloseDialog ();

    if (ret == `next)
    {
	return Nis::Export ();
    }
    return $[];
}
