/**
 * File:
 *   modules/Nis.ycp
 *
 * Module:
 *   Configuration of NIS client
 *
 * Summary:
 *   NIS client configuration data, I/O functions.
 *
 * Authors:
 *   Jan Holesovsky <kendy@suse.cz>
 *   Dan Vesely <dan@suse.cz>
 *   Martin Vidner <mvidner@suse.cz>
 *
 * $Id$
 *
 */

{
    module "Nis";
    textdomain "nis";

    import "Runlevel";
    import "Report";
    import "Summary";

    /**
     * Should ypbind be started at boot?
     * If not, other settings are not touched.
     */
    global boolean start = false;

    /**
     * IP addresses of NIS servers.
     */
    global list(string) servers = [];

    /**
     * @return Access the servers as a string
     */
    global define string GetServers () ``{
	return mergestring (servers, " ");
    }

    /**
     * Set the servers from a string
     * @param servers_s a whitespace separated list
     */
    global define void SetServers (string servers_s) ``{
	servers = filter (`s, splitstring (servers_s, " \t"), ``(s != ""));
    }

    /**
     * Broadcast for the default domain?
     * (New in ypbind-1.12)
     */
    global boolean default_broadcast = false;

    /**
     * Servers for a multiple-domain configuration.
     * Keys are domains, values are lists of servers (strings).
     * The domains must be the same as for multidomain_broadcast
     * @see multidomain_broadcast
     */
    global map multidomain_servers = $[];

    /**
     * Servers for a multiple-domain configuration.
     * Whether a broadcast will be done if the servers don't respond.
     * Keys are domains, values are booleans.
     * The domains must be the same as for multidomain_servers
     * @see multidomain_servers
     * @see broadcast
     */
    global map multidomain_broadcast = $[];

    string domain = "";
    string old_domain = nil;
    boolean domain_changed = false;

    /**
     * If the domain has changed from a nonempty one, it may only be
     * changed at boot time. Use this to warn the user.
     * @return whether changed by SetDomain
     */
    global define boolean DomainChanged () ``{
	return domain_changed;
    }

    /**
     * @return Get the NIS domain.
     */
    global define string GetDomain () ``{
	return domain;
    }

    /**
     * Set the NIS domain.
     * @param new_domain a new domain
     */
    global define void SetDomain (string new_domain) ``{
	domain = new_domain;
	if (domain != old_domain && old_domain != "")
	{
	    domain_changed = true;
	}
    }

    // The following four are from sysconfig/ypbind; the comments are
    // taken from there. The dialog help texts have "user friendlier"
    // descriptions.

    /**
     * If this option is set, ypbind will only bind to the loopback
     * interface and remote hosts cannot query it.
     */
    global boolean local_only = false;

    /**
     * If this option is set, ypbind will ignore /etc/yp.conf and use
     * a broadcast call to find a NIS server in the local subnet. You
     * should avoid to use this, it is a big security risk.
     * @see multidomain_broadcast
     * @see default_broadcast
     */
    global boolean broadcast = false;

    /**
     * You should set this to "yes" if you have a NIS server in your
     * network, which binds only to high ports over 1024. Since this
     * is a security risk, you should consider to replace the NIS
     * server with another implementation.
     */
    global boolean broken_server = false;

    /**
     * Extra options for ypbind. Here you can add options like
     * "-ypset", "-ypsetme", "-p port" or "-no-ping".
     */
    global string options = "";

    /**
     * If no, automounter will not be affected.
     */
    global boolean _autofs_allowed = false;
    /**
     * Start automounter and import the settings from NIS. (Bug 6092)
     */
    global boolean _start_autofs = false;

    /**
     * Output of "rcypbind start", if there was an error.
     * Read only.
     * This is currently used only in nis-server for its more advanced
     * error reporting. (Bug 14706)
     */
    global string YpbindErrors = "";

    /* ---------------------------------------------------------------- */

    /**
     * Has the configuration been changed?
     * Can be used as an argument to UI::ReallyAbortPopup
     */
    global boolean touched = false;

    /**
     * A convenient shortcut for setting touched.
     * @param really	if true, set Nis::touched
     * @example Nis::Touch (Nis::var != ui_var);
     */
    global define void Touch (boolean really) ``{
	touched = touched || really;
    }

    /* ---------------------------------------------------------------- */

    /**
     * Set module data
     * @return void
     */

    global define void Set (map settings) ``{
	start = lookup (settings, "start_nis", false);
	servers = lookup (settings, "nis_servers", []);
	default_broadcast = lookup (settings, "default_broadcast", false);
	domain = lookup (settings, "nis_domain", "");
	old_domain = domain;
	multidomain_servers = lookup (settings, "multidomain_servers", $[]);
	multidomain_broadcast = lookup (settings, "multidomain_broadcast", $[]);
	local_only = lookup (settings, "nis.local_only", false);
	broadcast = lookup (settings, "nis.broadcast", false);
	broken_server = lookup (settings, "nis.broken_server", false);
	options = lookup (settings, "nis.options", "");
	// autofs is not touched in Write if the map does not want it
	_autofs_allowed = haskey (settings, "start_autofs");
	_start_autofs = lookup (settings, "start_autofs", false);
    }

    // TODO update the map keys
    // better still: link to a current interface description
    /**
     * Get all the NIS configuration from a map.
     * When called by nis_auto (preparing autoinstallation data)
     * the map may be empty.
     * @param settings	$["start": "domain": "servers":[...] ]
     * @return	success
     */
    global define boolean Import (map settings) ``{
	if (size (settings) == 0)
	{
	    //Provide defaults for autoinstallation editing:
	    //Leave empty.
	    old_domain = domain;
	    return true;
	}

	boolean missing = false;
	foreach (`k, ["start_nis", "nis_domain", "nis_servers"], ``{
	    if (! haskey (settings, k))
	    {
		y2error ("Missing at Import: '%1'.", k);
		missing = true;
	    }
	});
	if (missing)
	{
	    return false;
	}

	Set(settings);
	return true;
    }

    // TODO update the map keys
    // better still: link to a current interface description
    /**
     * Dump the NIS settings to a map, for autoinstallation use.
     * @return $["start":, "servers":[...], "domain":]
     */
	global define map Export () ``{
		return $[
			"start_nis": start,
			"nis_servers": servers,
			"nis_domain": domain,
			"default_broadcast": default_broadcast,
			"multidomain_servers": multidomain_servers,
			"multidomain_broadcast": multidomain_broadcast,
			"nis.local_only": local_only,
			"nis.broadcast": broadcast,
			"nis.broken_server": broken_server,
			"nis.options": options,
			"start_autofs": _start_autofs,
		];
	}

    /**
     * @return Html formatted configuration summary
     */
    global define string Summary () ``{
	// TODO multidomain_servers, multidomain_broadcast
	// OK, a dumb mapping is possible, but wouldn't it be
	// too complicated to write by hand?
	string summary = "";
	string nc = Summary::NotConfigured ();
	summary = Summary::AddHeader(summary, _("NIS Client enabled"));
	summary = Summary::AddLine(summary, (start) ? _("Yes") : nc);
	summary = Summary::AddHeader(summary, _("NIS Domain"));
	summary = Summary::AddLine(summary, (domain != "") ? domain : nc);
	summary = Summary::AddHeader(summary, _("Broadcast"));
	summary = Summary::AddLine(summary, (broadcast) ? _("Yes") : nc);
	summary = Summary::AddHeader(summary, _("NIS Server"));
	// TODO default_broadcast
	summary = Summary::AddLine(summary,(servers !=[]) ? mergestring(servers,"<br>") : nc);
	// TODO: a full list
	summary = summary + ListItem (_("Other domains"), multidomain_servers);
	summary = Summary::AddHeader(summary, _("Answer to local host only"));
	summary = Summary::AddLine(summary, (local_only) ? _("Yes") : nc);
	summary = Summary::AddHeader(summary, _("Broken server"));
	summary = Summary::AddLine(summary, (broken_server) ? _("Yes") : nc);
	summary = Summary::AddHeader(summary, _("ypbind options"));
	summary = Summary::AddLine(summary, (options!="") ? options : nc);
	summary = Summary::AddHeader(summary, _("Auto-mounter enabled"));
	summary = Summary::AddLine(summary, (_start_autofs) ? _("Yes") : nc);

	return summary;
    }

    // copied from Mail.ycp
    // replace with a custom list
    /**
     * Summarizes a list of data
     * @param title passed to Summary::AddHeader
     * @param value a list (of scalars, lists or maps)
     * @return Summary-formatted description
     */
    define string ListItem(string title, any value) ``{
	string summary = "";
	summary = Summary::AddHeader(summary, title);
	//enhancement BEGIN
	if (is (value, map))
	{
	    value = maplist (any k, any v, value, ``(k));
	}
	//enhancement END
	if (is(value,list) && size(value)>0) {
	    summary = Summary::OpenList(summary);
	    foreach (`d, value, ``{
		string entry = "";
		if (is(d,map) || is (d,list))
		    entry = sformat("%1 Entries configured", size(value));
		else
		    entry = d;

		summary = Summary::AddListItem(summary, entry);
	    });
	    summary = Summary::CloseList(summary);
	} else {
	    summary = Summary::AddLine(summary,Summary::NotConfigured ());
	}
	return summary;
    }

    /**
     * Reads NIS settings from the SCR
     * @return success
     */
    global define boolean Read () ``{
	start = Runlevel::ServiceEnabled ("ypbind");
	servers = SCR::Read (.etc.yp_conf.servers);
	default_broadcast = SCR::Read (.etc.yp_conf.defaultbroadcast);
	multidomain_servers = SCR::Read (.etc.yp_conf.domainservers);
	multidomain_broadcast = SCR::Read (.etc.yp_conf.broadcast);
	domain  = SCR::Read (.etc.defaultdomain);
	//TODO: ypdomainname (dhcpcd does not use defaultdomain)
	old_domain = domain;
	local_only = SCR::Read (.sysconfig.ypbind.YPBIND_LOCAL_ONLY) == "yes";
	broadcast = SCR::Read (.sysconfig.ypbind.YPBIND_BROADCAST) == "yes";
	broken_server = SCR::Read (.sysconfig.ypbind.YPBIND_BROKEN_SERVER) == "yes";
	options = SCR::Read (.sysconfig.ypbind.YPBIND_OPTIONS);

	_autofs_allowed =
	    SCR::Read (.targetpkg.installed, "autofs") ||
	    SCR::Read (.targetpkg.installed, "autofs4");
	_start_autofs = _autofs_allowed && Runlevel::ServiceEnabled ("autofs");
	return true;
    }

    /**
     * Only write new configuration w/o starting any scripts
     * @return true on success
     */
    global define boolean WriteOnly()``{
	if (start)
	{
	    Runlevel::ServiceAdjust ("portmap", "enable");
	    Runlevel::ServiceAdjust ("ypbind", "enable");

	    if (!SCR::Write (.etc.defaultdomain, domain))
	    {
		Report::Error (sformat (_("Error writing file %1."), "/etc/defaultdomain"));
		return false;
	    }
	    SCR::Write (.etc.yp_conf.servers, servers);
	    SCR::Write (.etc.yp_conf.defaultbroadcast, default_broadcast);
	    SCR::Write (.etc.yp_conf.domainservers, multidomain_servers);
	    SCR::Write (.etc.yp_conf.broadcast, multidomain_broadcast);
	    if (! SCR::Write (.etc.yp_conf, nil))
	    {
		Report::Error (sformat (_("Error writing file %1."), "/etc/yp.conf"));
		return false;
	    }
	    SCR::Write (.sysconfig.ypbind.YPBIND_LOCAL_ONLY, local_only? "yes":"no");
	    SCR::Write (.sysconfig.ypbind.YPBIND_BROADCAST, broadcast? "yes":"no");
	    SCR::Write (.sysconfig.ypbind.YPBIND_BROKEN_SERVER, broken_server? "yes":"no");
	    SCR::Write (.sysconfig.ypbind.YPBIND_OPTIONS, options);
	    if (! SCR::Write (.sysconfig.ypbind, nil))
	    {
		Report::Error (sformat (_("Error writing file %1."), "/etc/sysconfig/ypbind"));
		return false;
	    }
	}
	else
	{
	    Runlevel::ServiceAdjust ("ypbind", "disable");
	}

	if (start)
	{
	    if (! WritePluses ())
	    {
		return false;
	    }

	    if (_autofs_allowed)
	    {
		// nsswitch automount:
		// bracket options not allowed, order does not matter
		string automount_s = SCR::Read (.etc.nsswitch_conf.automount);
		list(string) automount_l = filter (`s, splitstring (automount_s, " \t"), ``(s != ""));
		boolean enabled = find (string s, automount_l, ``(s == "nis")) != nil;
		boolean ok = true;
		if (_start_autofs && !enabled)
		{
		    ok = SCR::Write (.etc.nsswitch_conf.automount, automount_s + " nis");
		    ok = ok && SCR::Write (.etc.nsswitch_conf, nil);
		}
		else if (!_start_autofs && enabled)
		{
		    automount_l = filter (string s, automount_l, ``(s != "nis"));
		    ok = SCR::Write (.etc.nsswitch_conf.automount, mergestring (automount_l, " "));
		    ok = ok && SCR::Write (.etc.nsswitch_conf, nil);
		}
		if (!ok)
		{
		    Report::Error (sformat (_("Error writing file %1."), "/etc/nsswitch.conf"));
		    return false;
		}

		if (_start_autofs)
		{
		    Runlevel::ServiceAdjust ("autofs", "enable");
		}
		else
		{
		    Runlevel::ServiceAdjust ("autofs", "disable");
		}
	    }
	}
	return true;
    }


    /**
     * Saves NIS configuration.
     * @return true on success
     */
    global define boolean Write () ``{
	if (!WriteOnly ())
	{
	    return false;
	}

	Runlevel::RunInitScript ("ypbind", "stop");

	if (start)
	{
	    if (Runlevel::ServiceStatus ("portmap") != 0 )
	    {
		// portmap must not be started if it is running already (see bug # 9999)
		if (Runlevel::RunInitScript ("portmap", "start") != 0)
		{
		    // error popup message
		    Report::Error (_("Error while running portmapper."));
		    return false;
		}
	    }
	    sleep(1000);	// workaround for bug #10428, ypbind restart

	    map out = SCR::Execute (.target.bash_output, "/etc/init.d/ypbind start", $["TERM": "raw"]);
	    if (out["exit"]:1 == 0)
	    {
		YpbindErrors = "";
	    }
	    else
	    {
		YpbindErrors = out["stdout"]:"internal error";
		// error popup message
		Report::Error (_("Error while running ypclient."));
		return false;
	    }

	    // only test for a server if domain not changed
	    if (! domain_changed)
	    {
		if (SCR::Execute(.target.bash, "/usr/bin/ypwhich >/dev/null") != 0)
		{
		    // error popup message
		    Report::Error (_("NIS server not found."));
		    return false;
		}
	    }

	    if (_autofs_allowed)
	    {
		Runlevel::RunInitScript ("autofs", "stop");

		if (_start_autofs)
		{
		    Runlevel::RunInitScript ("autofs", "start");
		}
	    }
	}
	return true;
    }

    /**
     * Add "+" lines to system files so that NIS entries get merged in.
     * (Formerly this was done in SuSEconfig.ypclient)
     * @return success?
     */
    define boolean WritePluses () ``{
	list(string) files = [];
	if (SCR::Read (.etc.nsswitch_conf.passwd) == "compat")
	{
	    files = ["passwd", "shadow"];
	}
	if (SCR::Read (.etc.nsswitch_conf.group) == "compat")
	{
	    files = add (files, "group");
	}

	//don't forget a newline
	map what_to_write = $[
	    "passwd":	"+::::::",
	    "group":	"+:::",
	    "shadow":	"+",
	    ];
	foreach (string f, files, ``{
	    if (! WritePlusesTo (sformat ("/etc/%1", f), what_to_write[f]:""))
	    {
		return false;
	    }
	});
	return true;
    }

    /**
     * If a file does not contain a NIS entry, add it.
     * @param	file	pathname
     * @param	what	a "+" line without a '\n'
     * @return success?
     */
    define boolean WritePlusesTo (string file, string what) ``{
	if (SCR::Execute (.target.bash, "/usr/bin/grep -q '^[+-]' " + file) != 0)
	{
	    // not there, add it
	    // TODO: backup?
	    if (SCR::Execute (.target.bash, sformat ("/bin/echo '%1' >> %2", what, file)) != 0)
	    {
		Report::Error (sformat (_("Error writing file %1."), file));
		return false;
	    }
	}
	return true;
    }
}
